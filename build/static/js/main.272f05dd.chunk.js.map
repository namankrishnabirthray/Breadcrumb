{"version":3,"sources":["pages/Example1Page.js","pages/Example2Page.js","pages/Example3Page.js","pages/Example4Page.js","pages/HomePage.js","pages/NotFoundPage.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Example1Page","Box","Input","input","Example2Page","useState","inputValue","setInputValue","type","value","onChange","e","target","maxLength","className","id","data-cy","length","Example3Page","firstNameInputValue","setFirstNameInputValue","lastNameInputValue","setLastNameInputValue","Heading","ListItem","li","selected","Example4Page","selectedItemIndex","setSelectedItemIndex","clickHeaderText","setClickHeaderText","1","2","3","selectedCheckboxes","setSelectedCheckboxes","dropdownHeaderText","setDropdownHeaderText","hoveredItem","setHoveredItem","items","selectedCount","Object","values","filter","x","style","paddingLeft","map","item","i","key","onClick","onDoubleClick","display","checked","onMouseOver","Link","LinkBase","Label","HomePage","to","NotFoundPage","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.272f05dd.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #0E76A8;\n    color: white;\n    font-size: 32px;\n`;\n\nexport const Example1Page = () => (\n    <Wrapper>\n        <h1>My Awesome Web Application</h1>\n    </Wrapper>\n);","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    height: 100vh;\n    background-color: #0E76A8;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst Box = styled.div`\n    height: 500px;\n    width: 500px;\n    text-align: center;\n    box-shadow: 5px 5px 10px #333;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background-color: white;\n    border-radius: 16px;\n`;\n\nconst Input = styled.input`\n    border-radius: 8px;\n    font-size: 16px;\n    padding: 8px;\n    border: 2px solid #0E76A8;\n    outline-width: 0;\n    text-align: center;\n`;\n\nexport const Example2Page = () => {\n    const MAX_LENGTH = 15;\n    const [inputValue, setInputValue] = useState('');\n\n    return (\n        <Wrapper>\n            <Box>\n                <Input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={e => setInputValue(e.target.value)}\n                    maxLength={MAX_LENGTH}\n                    className=\"input-large\"\n                    id=\"main-input\"\n                    data-cy=\"max-char-input\"\n                />\n                <p>\n                    You have <span data-cy=\"chars-left-count\">{MAX_LENGTH - inputValue.length}</span> characters left\n                </p>\n            </Box>\n        </Wrapper>\n    );\n}","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    height: 100vh;\n    background-color: #0E76A8;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst Box = styled.div`\n    height: 500px;\n    width: 500px;\n    text-align: center;\n    box-shadow: 5px 5px 10px #333;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background-color: white;\n    border-radius: 16px;\n`;\n\nconst Input = styled.input`\n    border-radius: 8px;\n    font-size: 16px;\n    padding: 8px;\n    border: 2px solid #0E76A8;\n    outline-width: 0;\n    text-align: center;\n`;\n\nexport const Example3Page = () => {\n    const MAX_LENGTH = 15;\n    const [firstNameInputValue, setFirstNameInputValue] = useState('');\n    const [lastNameInputValue, setLastNameInputValue] = useState('');\n\n    return (\n        <Wrapper>\n            <Box>\n                <Input\n                    type=\"text\"\n                    value={firstNameInputValue}\n                    onChange={e => setFirstNameInputValue(e.target.value)}\n                    maxLength={MAX_LENGTH}\n                    className=\"input-large\"\n                    id=\"first-name-input\"\n                    data-cy=\"input-first-name\"\n                />\n                <p>\n                    You have&nbsp;\n                    <span data-cy=\"first-name-chars-left-count\">\n                        {MAX_LENGTH - firstNameInputValue.length}\n                    </span>\n                    &nbsp;characters left\n                </p>\n                <Input\n                    type=\"text\"\n                    value={lastNameInputValue}\n                    onChange={e => setLastNameInputValue(e.target.value)}\n                    maxLength={MAX_LENGTH}\n                    className=\"input-large\"\n                    id=\"last-name-input\"\n                    data-cy=\"input-last-name\"\n                />\n                <p>\n                    You have&nbsp;\n                    <span data-cy=\"last-name-chars-left-count\">\n                        {MAX_LENGTH - lastNameInputValue.length}\n                    </span>\n                    &nbsp;characters left\n                </p>\n            </Box>\n        </Wrapper>\n    );\n}","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    background-color: #0E76A8;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n`;\n\nconst Box = styled.div`\n    width: 500px;\n    box-shadow: 5px 5px 10px #333;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    background-color: white;\n    border-radius: 16px;\n    padding: 16px;\n    margin: 16px;\n`;\n\nconst Heading = styled.div`\n    font-weight: bold;\n    font-size: 24px;\n`;\n\nconst ListItem = styled.li`\n    list-style-type: none;\n    border-bottom: 1px solid black;\n    padding: 8px;\n    \n    ${({ selected }) => selected ? 'background-color: #DDD;' : ''}\n`;\n\nexport const Example4Page = () => {\n    const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n    const [clickHeaderText, setClickHeaderText] = useState('Nothing selected');\n    const [selectedCheckboxes, setSelectedCheckboxes] = useState({\n        1: false,\n        2: false,\n        3: false,\n    });\n    const [dropdownHeaderText, setDropdownHeaderText] = useState('Nothing selected');\n    const [hoveredItem, setHoveredItem] = useState('Nothing selected');\n\n    const items = [\n        'Option One',\n        'Option Two',\n        'Option Three',\n    ];\n\n    const selectedCount = Object.values(selectedCheckboxes)\n        .filter(x => x)\n        .length;\n\n    return (\n        <Wrapper>\n            <Box>\n                <Heading>.click() and .dblClick()</Heading>\n                <p>Click to highlight, double click to select</p>\n                <p>Selected Item:\n                    <span data-cy=\"box-1-selected-name\">\n                        {clickHeaderText}\n                    </span>\n                </p>\n                <ul\n                    data-cy=\"box-1-items-list\"\n                    style={{ paddingLeft: 0 }}>\n                    {items.map((item, i) => (\n                        <ListItem\n                            key={i}\n                            className=\"box-1-list-item\"\n                            onClick={() => setSelectedItemIndex(i)}\n                            onDoubleClick={() => setClickHeaderText(item)}\n                            selected={i === selectedItemIndex}\n                        >{item}</ListItem>\n                    ))}\n                </ul>\n            </Box>\n            <Box>\n                <Heading>.check() and .uncheck()</Heading>\n                <form>\n                    <p>\n                        <span data-cy=\"box-2-selected-count\">\n                            {selectedCount}\n                        </span>\n                        &nbsp;checkboxes selected\n                    </p>\n                    <div\n                        className=\"checkboxes\"\n                        data-cy=\"box-2-checkboxes\">\n                        {items.map((item, i) => (\n                            <label key={i} style={{ display: 'block' }}>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={selectedCheckboxes[i]}\n                                    onChange={() => setSelectedCheckboxes({\n                                        ...selectedCheckboxes,\n                                        [i]: !selectedCheckboxes[i],\n                                    })} />\n                                {item}\n                            </label>\n                        ))}\n                    </div>\n                </form>\n            </Box>\n            <Box>\n                <Heading>.select()</Heading>\n                <p>Selected Item:&nbsp;\n                    <span data-cy=\"box-3-selected-name\">\n                        {dropdownHeaderText}\n                    </span>\n                </p>\n                <select\n                    data-cy=\"box-3-dropdown\"\n                    onChange={e => setDropdownHeaderText(e.target.value)}>\n                    {items.map((item, i) => (\n                        <option\n                            key={i}\n                            value={item}\n                        >{item}</option>\n                    ))}\n                </select>\n            </Box>\n            <Box>\n                <Heading>.trigger('mouseover')</Heading>\n                <p>Selected Item:&nbsp;\n                    <span data-cy=\"box-4-selected-name\">\n                        {hoveredItem}\n                    </span>\n                </p>\n                <ul\n                    style={{ paddingLeft: 0 }}\n                    data-cy=\"box-4-items-list\">\n                    {items.map((item, i) => (\n                        <ListItem\n                            key={i}\n                            onMouseOver={() => setHoveredItem(item)}\n                            selected={item === hoveredItem}\n                        >{item}</ListItem>\n                    ))}\n                </ul>\n            </Box>\n        </Wrapper>\n    );\n}","import React from 'react';\nimport { Link as LinkBase } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    text-align: center;\n`;\n\nconst Link = styled(LinkBase)`\n    color: white;\n    font-weight: bold;\n    text-decoration: none;\n`;\n\nconst Label = styled.div`\n    background-color: #0E76A8;\n    border-radius: 8px;\n    padding: 16px;\n    max-width: 400px;\n    margin: 16px auto;\n    font-size: 24px;\n`;\n\nexport const HomePage = () => (\n    <Wrapper>\n        <Link to='/example-1'>\n            <Label>Example 1</Label>\n        </Link>\n        <Link to='/example-2'>\n            <Label>Example 2</Label>\n        </Link>\n        <Link to='/example-3'>\n            <Label>Example 3</Label>\n        </Link>\n        <Link to='/example-4'>\n            <Label>Example 4</Label>\n        </Link>\n    </Wrapper>\n)","import React from 'react';\n\nexport const NotFoundPage = () => (\n    <h1>Make sure you typed in the url correctly!</h1>\n);","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {\n  Example1Page,\n  Example2Page,\n  Example3Page,\n  Example4Page,\n  HomePage,\n  NotFoundPage,\n} from './pages';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={HomePage} />\n        <Route path=\"/example-1\" component={Example1Page} />\n        <Route path=\"/example-2\" component={Example2Page} />\n        <Route path=\"/example-3\" component={Example3Page} />\n        <Route path=\"/example-4\" component={Example4Page} />\n        <Route component={NotFoundPage} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}